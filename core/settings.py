"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

import structlog
from environ import environ
from kombu import Queue


################################################################################
# 1. ENVIRONMENT & PATHS
################################################################################

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
env = environ.Env()
environ.Env.read_env(BASE_DIR / "envs" / ".dev-sample")

################################################################################
# 2. CORE SETTINGS
################################################################################
# CORE settings
SECRET_KEY = env("SECRET_KEY", default="django-insecure-default-key")
DEBUG = env.bool("DEBUG", default=True)
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])
SITE_ID = 1
ROOT_URLCONF = "core.urls"
WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"  # for Channels/WebSockets
APPEND_SLASH = True
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

################################################################################
# 3. INSTALLED APPS
################################################################################
# Third‑party apps
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "rest_framework.authtoken",
    "django_filters",
    "daphne",
    "channels",
    "django_celery_beat",
    "drf_spectacular",
    "corsheaders",
    "django_structlog",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.line",
    "allauth.socialaccount.providers.twitch",
    "allauth.socialaccount.providers.discord",
    "django_extensions",
]

# Django core apps
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]

# Local apps (including common_models submodule)
LOCAL_APPS = [
    "apps.users",
    "apps.health",
    "apps.custom_auth",
    "apps.rbac",
    "common_models",
]

INSTALLED_APPS = THIRD_PARTY_APPS + DJANGO_APPS + LOCAL_APPS

################################################################################
# 4. MIDDLEWARE
################################################################################
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_structlog.middlewares.RequestMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

################################################################################
# 5. TEMPLATES
################################################################################
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",  # noqa
        "DIRS": [],  # add global template paths here
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",   # noqa
                "django.template.context_processors.request",   # noqa
                "django.contrib.auth.context_processors.auth",   # noqa
                "django.contrib.messages.context_processors.messages",   # noqa
            ],
        },
    },
]

################################################################################
# 6. DATABASES & CACHES
################################################################################
MIGRATION_MODULES = {
    'common_models': 'common_models.migrations',
}
DATABASES = {
    "default": {
        "ENGINE": env("SQL_ENGINE", default="django.db.backends.sqlite3"),
        "NAME": env("SQL_DATABASE", default=str(BASE_DIR / "db.sqlite3")),
        "USER": env("SQL_USER", default="user"),
        "PASSWORD": env("SQL_PASSWORD", default="password"),
        "HOST": env("SQL_HOST", default="localhost"),
        "PORT": env("SQL_PORT", default="5432"),
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",  # noqa
        "LOCATION": f"redis://{os.getenv('REDIS_HOST', 'localhost')}:"
                    f"{os.getenv('REDIS_PORT', '6379')}/{os.getenv('REDIS_DB', '1')}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_TIMEOUT": 5,
            "SOCKET_CONNECT_TIMEOUT": 5,
        },
    }
}

################################################################################
# 7. AUTHENTICATION & ALLAUTH
################################################################################
AUTH_USER_MODEL = "common_models.User"

AUTHENTICATION_BACKENDS = [
    "apps.custom_auth.authentication.CustomAuthBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_LOGIN_METHODS = {"email", "username"}

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "openid",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile",
        ],
        "AUTH_PARAMS": {"access_type": "online"},
        "REDIRECT_URI": "http://127.0.0.1:8010/api/v1/social/google/login/callback/",
    }
}

SOCIALACCOUNT_ADAPTER = "apps.custom_auth.views.CustomSocialAccountAdapter"
ACCOUNT_ADAPTER = "apps.custom_auth.adapters.CustomAccountAdapter"

################################################################################
# 8. REST FRAMEWORK & JWT
################################################################################
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "utils.pagination.StandardResultsSetPagination",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "core.exceptions.exception_handler.custom_exception_handler",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30000),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

SPECTACULAR_SETTINGS = {
    "TITLE": "後台 API",
    "DESCRIPTION": "後台專案文件",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

################################################################################
# 9. CELERY & CHANNELS
################################################################################
# Broker & backend
CELERY_BROKER_URL = env("CELERY_BROKER", default="redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = env("CELERY_BACKEND", default="redis://127.0.0.1:6379/0")

# Task routing & queues
CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TASK_CREATE_MISSING_QUEUES = False
CELERY_TASK_QUEUES = (
    Queue("default"),
    Queue("high_priority"),
    Queue("low_priority"),
)
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True


def route_task(name, args, kwargs, options, task=None, **kw):
    if ":" in name:
        queue, _ = name.split(":")
        return {"queue": queue}
    return {"queue": "default"}


CELERY_TASK_ROUTES = (route_task,)

# Periodic tasks
CELERY_BEAT_SCHEDULE = {
    "task-clear-session": {
        "task": "task_clear_session",
        "schedule": 300,
    }
}

# Channels layer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",  # noqa
        "CONFIG": {"hosts": [env("CHANNELS_REDIS", default="redis://127.0.0.1:6379/0")]},
    }
}

################################################################################
# 10. STATIC & MEDIA
################################################################################
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

################################################################################
# 11. THIRD‑PARTY CREDENTIALS
################################################################################
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = env("TWILIO_PHONE_NUMBER")

SENDGRID_API_KEY = env("SENDGRID_API_KEY")
SENDER_EMAIL = env("SENDER_EMAIL")
RECIPIENT_EMAIL = env("RECIPIENT_EMAIL")

VERIFIED_USER_EXPIRATION = env.int("VERIFIED_USER_EXPIRATION", default=300)

################################################################################
# 12. PASSWORD RESET / THROTTLING
################################################################################
# SMS reset
FORGET_PASSWORD_SMS_MAX_ATTEMPTS = env.int("FORGET_PASSWORD_SMS_MAX_ATTEMPTS", default=6)
FORGET_PASSWORD_SMS_BLOCK_DURATION = env.int("FORGET_PASSWORD_SMS_BLOCK_DURATION", default=30 * 60)
FORGET_PASSWORD_SMS_COOLDOWN = env.int("FORGET_PASSWORD_SMS_COOLDOWN", default=60)
FORGET_PASSWORD_SMS_EXPIRE = env.int("FORGET_PASSWORD_SMS_EXPIRE", default=5 * 60)
FORGET_PASSWORD_TOKEN_EXPIRE_MINUTES = env.int("FORGET_PASSWORD_TOKEN_EXPIRE_MINUTES", default=15 * 60)
FORGET_PASSWORD_SMS_ATTEMPT_WINDOW = env.int("FORGET_PASSWORD_SMS_ATTEMPT_WINDOW", default=5 * 60)
FORGET_PASSWORD_AUTH_TOKEN_EXPIRE_MINUTES = env.int("FORGET_PASSWORD_AUTH_TOKEN_EXPIRE_MINUTES", default=10 * 60)

# Email reset
FORGET_PASSWORD_EMAIL_MAX_ATTEMPTS = env.int("FORGET_PASSWORD_EMAIL_MAX_ATTEMPTS", default=6)
FORGET_PASSWORD_EMAIL_BLOCK_DURATION = env.int("FORGET_PASSWORD_EMAIL_BLOCK_DURATION", default=30 * 60)
FORGET_PASSWORD_EMAIL_COOLDOWN = env.int("FORGET_PASSWORD_EMAIL_COOLDOWN", default=60)
FORGET_PASSWORD_EMAIL_EXPIRE = env.int("FORGET_PASSWORD_EMAIL_EXPIRE", default=5 * 60)
FORGET_PASSWORD_EMAIL_ATTEMPT_WINDOW = env.int("FORGET_PASSWORD_EMAIL_ATTEMPT_WINDOW", default=5 * 60)
FORGET_PASSWORD_EMAIL_TOKEN_EXPIRE_MINUTES = env.int("FORGET_PASSWORD_EMAIL_TOKEN_EXPIRE_MINUTES", default=15 * 60)

################################################################################
# 13. LOGGING & STRUCTLOG
################################################################################
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
        },
        "plain_console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
        },
        "key_value": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.KeyValueRenderer(
                key_order=["timestamp", "level", "event", "logger"]
            ),
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "plain_console",
        },
        "info": {
            "class": "logging.handlers.WatchedFileHandler",
            "filename": "logs/info.log",
            "formatter": "json_formatter",
            "level": "INFO",
        },
        "error": {
            "class": "logging.handlers.WatchedFileHandler",
            "filename": "logs/error.log",
            "formatter": "json_formatter",
            "level": "ERROR",
        },
        "flat_line_file": {
            "class": "logging.handlers.WatchedFileHandler",
            "filename": "logs/flat_line.log",
            "formatter": "key_value",
        },
    },
    "loggers": {
        "django_structlog": {
            "handlers": ["console", "flat_line_file", "info", "error"],
            "level": "INFO",
            "propagate": False,
        },
        "apps": {
            "handlers": ["console", "flat_line_file", "info", "error"],
            "level": "INFO",
            "propagate": False,
        },
        "core": {
            "handlers": ["console", "flat_line_file", "info", "error"],
            "level": "INFO",
            "propagate": False,
        },
        "django": {
            "handlers": ["console", "flat_line_file", "info", "error"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["error"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["info"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

################################################################################
# 14. CUSTOM LOCK SETTINGS
################################################################################
LOGIN_LOCK_TIME = env.int('LOGIN_LOCK_TIME', default=300)
LOGIN_FAIL_COUNT_TIMEOUT = env.int('LOGIN_FAIL_COUNT_TIMEOUT', default=900)
TEMP_LOCK_THRESHOLD = env.int('TEMP_LOCK_THRESHOLD', default=4)
PERMANENT_LOCK_THRESHOLD = env.int('PERMANENT_LOCK_THRESHOLD', default=20)
